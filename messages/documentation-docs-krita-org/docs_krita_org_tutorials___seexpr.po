msgid ""
msgstr ""
"Project-Id-Version: Krita Manual 5.2\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-07-26 09:18+0200\n"
"PO-Revision-Date: 2025-03-17 14:53+0700\n"
"Last-Translator: Thai Translator <none>\n"
"Language-Team: Thai <kde-i18n-docs@kde.org>\n"
"Language: th\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#. +> trunk5
#: ../../tutorials/seexpr.rst:1 ../../tutorials/seexpr.rst:12
msgid "Introduction to SeExpr"
msgstr ""

#. +> trunk5
#: ../../tutorials/seexpr.rst:16
msgid "This document will introduce you to the SeExpr expression language."
msgstr ""

#. +> trunk5
#: ../../tutorials/seexpr.rst:20
msgid "What is SeExpr?"
msgstr ""

#. +> trunk5
#: ../../tutorials/seexpr.rst:22
msgid "SeExpr is an embeddable expression language, designed by Disney Animation, that allows host applications to render dynamically generated content. Pixar calls it `in its documentation <https://renderman.pixar.com/resources/RenderMan_20/PxrSeExpr.html>`_ a \"scriptable pattern generator and combiner\"."
msgstr ""

#. +> trunk5
#: ../../tutorials/seexpr.rst:27
msgid "SeExpr is available within Krita as a Fill Layer."
msgstr ""

#. +> trunk5
#: ../../tutorials/seexpr.rst:30
msgid ":ref:`seexpr`"
msgstr ""

#. +> trunk5
#: ../../tutorials/seexpr.rst:31
msgid ":ref:`seexpr_fill_layer`"
msgstr ""

#. +> trunk5
#: ../../tutorials/seexpr.rst:32
msgid ":ref:`resource_seexpr_scripts`"
msgstr ""

#. +> trunk5
#: ../../tutorials/seexpr.rst:33
msgid "`\"Procedural texture generator (example and wishes)\" on Krita Artists <https://krita-artists.org/t/procedural-texture-generator-example-and-wishes/7638>`_"
msgstr ""

#. +> trunk5
#: ../../tutorials/seexpr.rst:34
msgid "`Inigo Quilez's articles <https://iquilezles.org/www/index.htm>`_"
msgstr ""

#. +> trunk5
#: ../../tutorials/seexpr.rst:35
msgid "`The Book of Shaders <https://thebookofshaders.com/>`_"
msgstr ""

#. +> trunk5
#: ../../tutorials/seexpr.rst:39
msgid "Background"
msgstr ""

#. +> trunk5
#: ../../tutorials/seexpr.rst:41
msgid "To understand what SeExpr is about, we need to differentiate between two types of graphics, *raster* and *procedural*."
msgstr ""

#. +> trunk5
#: ../../tutorials/seexpr.rst:44
msgid "The vast majority of the computer-generated stuff you see every day belong to the first type-- images like photos, your favorite anime screenshots, memes, are all a multitude of tiny little dots of color, or *pixels*, arranged into a grid."
msgstr ""

#. +> trunk5
#: ../../tutorials/seexpr.rst:49
msgid "Raster graphics have two drawbacks. First, once you create them, their resolution is **fixed**. You cannot zoom in and magically get any more detail. And if you need to change them, either you go back to the source and sample it again (which is sometimes impossible), or edit it with a raster graphics program, like Krita."
msgstr ""

#. +> trunk5
#: ../../tutorials/seexpr.rst:55
msgid "One of the biggest problems, however, is that we are always limited by the **space** our programs can use; either secondary storage, like SD cards, or RAM. Unless compressed, image memory needs are `quadratic in the size of the image <https://blender.stackexchange.com/questions/112505/why-is-my-half-resolution-render-taking-a-quarter-of-the-time-of-the-full-one>`_. For a quick example, the :ref:`create_new_document` dialog of Krita tells you three bits of information: its size in pixels, the size of the pixel itself, and *the total memory needed*."
msgstr ""

#. +> trunk5
#: ../../tutorials/seexpr.rst:64
msgid ".. image:: images/Krita_newfile.png"
msgstr ""

#. +> trunk5
#: ../../tutorials/seexpr.rst:65
msgid "Here's a summary for square textures. Note that the memory needed is for *one layer only*:"
msgstr ""

#. +> trunk5
#: ../../tutorials/seexpr.rst:69
msgid "Size"
msgstr ""

#. +> trunk5
#: ../../tutorials/seexpr.rst:69
msgid "Memory needed"
msgstr ""

#. +> trunk5
#: ../../tutorials/seexpr.rst:71
msgid "256"
msgstr ""

#. +> trunk5
#: ../../tutorials/seexpr.rst:71
msgid "256 KB"
msgstr ""

#. +> trunk5
#: ../../tutorials/seexpr.rst:72
msgid "512"
msgstr ""

#. +> trunk5
#: ../../tutorials/seexpr.rst:72
msgid "1 MB"
msgstr ""

#. +> trunk5
#: ../../tutorials/seexpr.rst:73
msgid "1024"
msgstr ""

#. +> trunk5
#: ../../tutorials/seexpr.rst:73
msgid "4 MB"
msgstr ""

#. +> trunk5
#: ../../tutorials/seexpr.rst:74
msgid "2048"
msgstr ""

#. +> trunk5
#: ../../tutorials/seexpr.rst:74
msgid "16 MB"
msgstr ""

#. +> trunk5
#: ../../tutorials/seexpr.rst:75
msgid "4096"
msgstr ""

#. +> trunk5
#: ../../tutorials/seexpr.rst:75
msgid "64 MB"
msgstr ""

#. +> trunk5
#: ../../tutorials/seexpr.rst:78
msgid "An alternative is to use :ref:`vector_graphics`. Vector graphics, for instance SVGs, employ mathematic formulae like splines and BÃ©zier curves to describe a shape. As they are mathematically defined, they can be resized to suit your needs without losing resolution."
msgstr ""

#. +> trunk5
#: ../../tutorials/seexpr.rst:83
msgid "SeExpr belongs to a different class, *procedural graphics*. Similar to vector graphics, procedural graphics only need a few KBs of secondary storage for their definition. But they are not defined by mathematical formulae; you actually *code* how the color is calculated at each point of the texture. And, because it is not limited in its precision, you can render complex patterns in your layers at completely arbitrary resolution."
msgstr ""

#. +> trunk5
#: ../../tutorials/seexpr.rst:92
msgid "Writing a script"
msgstr ""

#. +> trunk5
#: ../../tutorials/seexpr.rst:94
msgid "In this tutorial, we'll show you how to write a script in SeExpr, render it to a layer, and then save it as a preset."
msgstr ""

#. +> trunk5
#: ../../tutorials/seexpr.rst:97
msgid "We'll start by going to the :ref:`layer_docker`, and adding a new Fill Layer. Then select the SeExpr generator from the list. You'll be greeted by this window:"
msgstr ""

#. +> trunk5
#: ../../tutorials/seexpr.rst:103
msgid "The SeExpr generator dialog is divided into two tabs. For now, we'll stay on :guilabel:`Options`."
msgstr ""

#. +> trunk5
#: ../../tutorials/seexpr.rst:107
msgid ":ref:`fill_layers` describes these tabs in more detail."
msgstr ""

#. +> trunk5
#: ../../tutorials/seexpr.rst:109
msgid "Let's start by painting a layer in light blue."
msgstr ""

#. +> trunk5
#: ../../tutorials/seexpr.rst:111
msgid "First, SeExpr scripts must define an output variable, let's call it ``$color``. As SeExpr thinks of colors in the :ref:`RGB color space<model_rgb>`, color variables are defined by a triplet of numbers known as a *vector*. We'll start by defining the ``$color`` variable and giving it a value."
msgstr ""

#. +> trunk5
#: ../../tutorials/seexpr.rst:116
msgid "Go to the text box, and clear it if it has any text. Then, define and set ``$color`` to something like ``[0.5, 0.5, 1]`` (half lit red, half lit green, fully lit blue)::"
msgstr ""

#. +> trunk5
#: ../../tutorials/seexpr.rst:120
msgid "$color = [0.5, 0.5, 1];"
msgstr ""

#. +> trunk5
#: ../../tutorials/seexpr.rst:122
msgid "SeExpr needs to know which variable holds the final color value. This is done by writing at the end, on its own line, the name of the variable::"
msgstr ""

#. +> trunk5
#: ../../tutorials/seexpr.rst:125
msgid "$color"
msgstr ""

#. +> trunk5
#: ../../tutorials/seexpr.rst:127
msgid "The script should now look like this::"
msgstr ""

#. +> trunk5
#: ../../tutorials/seexpr.rst:129
msgid ""
"$color = [0.5, 0.5, 1];\n"
"$color"
msgstr ""

#. +> trunk5
#: ../../tutorials/seexpr.rst:132
msgid "Click :guilabel:`OK`, and you'll render your first script!"
msgstr ""

#. +> trunk5
#: ../../tutorials/seexpr.rst:137
msgid "To be absolutely precise, SeExpr **has no color management**. It always renders textures as :ref:`32-bit float <bit_depth>`, :ref:`gamma corrected <linear_and_gamma>`, sRGB images. Krita transforms them into your document's color space using the sRGB-elle-V2-srgbtrc.icc profile."
msgstr ""

#. +> trunk5
#: ../../tutorials/seexpr.rst:143
msgid "See :ref:`color_managed_workflow` for what this means."
msgstr ""

#. +> trunk5
#: ../../tutorials/seexpr.rst:147
msgid "Managing your script using widgets"
msgstr ""

#. +> trunk5
#: ../../tutorials/seexpr.rst:149
msgid "There is also another way to define and edit your variables. Open the fill layer's properties by right-clicking on :guilabel:`Fill Layer 1`, and selecting :guilabel:`Layer Properties...`."
msgstr ""

#. +> trunk5
#: ../../tutorials/seexpr.rst:154
msgid ".. image:: images/seexpr/SeExpr_prop_1.png"
msgstr ""

#. +> trunk5
#: ../../tutorials/seexpr.rst:155
msgid "Notice the middle box? Once it detects a syntactically correct script, SeExpr enables a whole chunk of knobs to manage individual variables. In our example above, you can change ``$color``'s in three ways:"
msgstr ""

#. +> trunk5
#: ../../tutorials/seexpr.rst:159
msgid "enter the red, green, or blue channel's value in the input fields"
msgstr ""

#. +> trunk5
#: ../../tutorials/seexpr.rst:160
msgid "move the little colored sliders to change the respective channel"
msgstr ""

#. +> trunk5
#: ../../tutorials/seexpr.rst:161
msgid "click on the preview square to the left of the boxes, to select a completely new color."
msgstr ""

#. +> trunk5
#: ../../tutorials/seexpr.rst:163
msgid "The last button on the middle box is always :guilabel:`Add new variable`. Click it and this dialog will open:"
msgstr ""

#. +> trunk5
#: ../../tutorials/seexpr.rst:167
msgid ".. image:: images/seexpr/SeExpr_add_variable.png"
msgstr ""

#. +> trunk5
#: ../../tutorials/seexpr.rst:168
msgid "This dialog shows you all the types of variables that SeExpr accepts:"
msgstr ""

#. +> trunk5
#: ../../tutorials/seexpr.rst:171
msgid "Curve and Color curve"
msgstr ""

#. +> trunk5
#: ../../tutorials/seexpr.rst:173
msgid "They are the SeExpr version of :ref:`Stop Gradients <resource_gradients>`: they interpolate a ramp given by a set of values."
msgstr ""

#. +> trunk5
#: ../../tutorials/seexpr.rst:175
msgid "Curves represent 1D gradients, returning a single float at each evaluation point."
msgstr ""

#. +> trunk5
#: ../../tutorials/seexpr.rst:177
msgid "Color curves represent RGB gradients, returning a Color at each point."
msgstr ""

#. +> trunk5
#: ../../tutorials/seexpr.rst:178
msgid "Integers and Floats"
msgstr ""

#. +> trunk5
#: ../../tutorials/seexpr.rst:180
msgid "Numbers."
msgstr ""

#. +> trunk5
#: ../../tutorials/seexpr.rst:181
msgid "Vector"
msgstr ""

#. +> trunk5
#: ../../tutorials/seexpr.rst:183
msgid "A triplet of floats."
msgstr ""

#. +> trunk5
#: ../../tutorials/seexpr.rst:184
msgid "Color"
msgstr ""

#. +> trunk5
#: ../../tutorials/seexpr.rst:186
msgid "A vector representing an RGB color."
msgstr ""

#. +> trunk5
#: ../../tutorials/seexpr.rst:187
msgid "Swatch"
msgstr ""

#. +> trunk5
#: ../../tutorials/seexpr.rst:189
msgid "A list of Colors."
msgstr ""

#. +> trunk5
#: ../../tutorials/seexpr.rst:190
msgid "String"
msgstr ""

#. +> trunk5
#: ../../tutorials/seexpr.rst:192
msgid "Usually single words."
msgstr ""

#. +> trunk5
#: ../../tutorials/seexpr.rst:194
msgid "For instance, you could replicate ``$color`` in the :guilabel:`Vector` tab:"
msgstr ""

#. +> trunk5
#: ../../tutorials/seexpr.rst:197
msgid ".. image:: images/seexpr/SeExpr_add_variable_vector.png"
msgstr ""

#. +> trunk5
#: ../../tutorials/seexpr.rst:200
msgid "Creating your first preset"
msgstr ""

#. +> trunk5
#: ../../tutorials/seexpr.rst:202
msgid "Once your script is ready, you can reuse it by making a preset."
msgstr ""

#. +> trunk5
#: ../../tutorials/seexpr.rst:204
msgid "You can create one through the top bar of the :guilabel:`Options` tab:"
msgstr ""

#. +> trunk5
#: ../../tutorials/seexpr.rst:208
msgid "Select :guilabel:`Save New SeExpr Preset...` and the following dialog will open:"
msgstr ""

#. +> trunk5
#: ../../tutorials/seexpr.rst:213
msgid "You can edit the name of the preset in the top line edit box, and set a  thumbnail for easy identification."
msgstr ""

#. +> trunk5
#: ../../tutorials/seexpr.rst:215
msgid "The dialog will append \"Copy\" to the preset's name if it is a copy of an existing one. You can change it at will."
msgstr ""

#. +> trunk5
#: ../../tutorials/seexpr.rst:217
msgid "The dialog provides the following choices for setting a thumbnail:"
msgstr ""

#. +> trunk5
#: ../../tutorials/seexpr.rst:220
msgid "Load Existing Thumbnail"
msgstr ""

#. +> trunk5
#: ../../tutorials/seexpr.rst:222
msgid "If the preset already has a thumbnail (for instance, if you created it from an existing preset), this button will load and apply it."
msgstr ""

#. +> trunk5
#: ../../tutorials/seexpr.rst:223
msgid "Load Image"
msgstr ""

#. +> trunk5
#: ../../tutorials/seexpr.rst:225
msgid "Applies an image from the filesystem as a thumbnail."
msgstr ""

#. +> trunk5
#: ../../tutorials/seexpr.rst:226
msgid "Render Script to Thumbnail"
msgstr ""

#. +> trunk5
#: ../../tutorials/seexpr.rst:228
msgid "Renders your script to a 256x256 texture, and applies the latter as a thumbnail."
msgstr ""

#. +> trunk5
#: ../../tutorials/seexpr.rst:229
msgid "Clear Thumbnail"
msgstr ""

#. +> trunk5
#: ../../tutorials/seexpr.rst:231
msgid "Deletes the thumbnail. Note that, if the preset is a copy of an existing one, this can be reverted by clicking :guilabel:`Load Existing Thumbnail`."
msgstr ""

#. +> trunk5
#: ../../tutorials/seexpr.rst:235
msgid "Changing existing presets"
msgstr ""

#. +> trunk5
#: ../../tutorials/seexpr.rst:237
msgid "If you change a preset's script, you will notice two new buttons in the top bar of the :guilabel:`Options` tab:"
msgstr ""

#. +> trunk5
#: ../../tutorials/seexpr.rst:241
msgid "The reload button will restore the preset to its original properties, while clicking on :guilabel:`Overwrite Preset` will save your changes."
msgstr ""

#. +> trunk5
#: ../../tutorials/seexpr.rst:243
msgid "Additionally, you can edit the preset's name by clicking on the rename button, entering the new name, and clicking on :guilabel:`Save`:"
msgstr ""

#. +> trunk5
#: ../../tutorials/seexpr.rst:251
msgid "Bundling your presets"
msgstr ""

#. +> trunk5
#: ../../tutorials/seexpr.rst:253
msgid "Sharing your scripts is easy! SeExpr script presets are just like any other resource in Krita. Follow the instructions in :ref:`resource_management` to create your own bundles."
msgstr ""

#. +> trunk5
#: ../../tutorials/seexpr.rst:0
msgid ".. image:: images/seexpr/SeExpr_editor.png"
msgstr ""

#. +> trunk5
#: ../../tutorials/seexpr.rst:0
msgid ".. image:: images/seexpr/SeExpr_first_render.png"
msgstr ""

#. +> trunk5
#: ../../tutorials/seexpr.rst:0
msgid ".. image:: images/seexpr/SeExpr_save.png"
msgstr ""

#. +> trunk5
#: ../../tutorials/seexpr.rst:0
msgid ".. image:: images/seexpr/SeExpr_overwrite_preset.png"
msgstr ""

#. +> trunk5
#: ../../tutorials/seexpr.rst:0
msgid ".. image:: images/seexpr/SeExpr_rename_preset.png"
msgstr ""
